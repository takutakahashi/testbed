---
# Source: zfs-localpv/templates/rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: openebs-zfs-controller-sa
  namespace: openebs
  labels:
    chart: zfs-localpv-2.1.0
    heritage: Helm
    openebs.io/version: "2.1.0"
    role: "openebs-zfs"
    app: "openebs-zfs-controller"
    release: zfs-localpv
    component: "openebs-zfs-controller"
    openebs.io/component-name: "openebs-zfs-controller"
---
# Source: zfs-localpv/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: openebs-zfs-node-sa
  namespace: openebs
  labels:
    chart: zfs-localpv-2.1.0
    heritage: Helm
    openebs.io/version: "2.1.0"
    role: "openebs-zfs"
    name: "openebs-zfs-node"
    release: zfs-localpv
    openebs.io/component-name: "openebs-zfs-node"
---
# Source: zfs-localpv/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: openebs-zfspv-bin
  namespace: openebs # should be the same namespace where it is getting mounted
  labels:
    chart: zfs-localpv-2.1.0
    heritage: Helm
    openebs.io/version: "2.1.0"
    role: "openebs-zfs"
    name: "openebs-zfs-node"
    release: zfs-localpv
    openebs.io/component-name: "openebs-zfs-node"
data:
  zfs: |
    #!/bin/sh
    if [ -x /host/sbin/zfs ]; then
      chroot /host /sbin/zfs "$@"
    elif [ -x /host/usr/sbin/zfs ]; then
      chroot /host /usr/sbin/zfs "$@"
    else
      chroot /host "zfs" "$@"
    fi
---
# Source: zfs-localpv/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-zfs-provisioner-role
  labels:
    chart: zfs-localpv-2.1.0
    heritage: Helm
    openebs.io/version: "2.1.0"
    role: "openebs-zfs"
    app: "openebs-zfs-controller"
    release: zfs-localpv
    component: "openebs-zfs-controller"
    openebs.io/component-name: "openebs-zfs-controller"
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["persistentvolumes", "services"]
    verbs: ["get", "list", "watch", "create", "delete", "update", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims/status"]
    verbs: ["update", "patch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses", "csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [ "storage.k8s.io" ]
    resources: [ "csistoragecapacities"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "watch", "list", "delete", "update", "create"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: ["*"]
    resources: ["zfsvolumes", "zfssnapshots", "zfsbackups", "zfsrestores", "zfsnodes"]
    verbs: ["*"]
---
# Source: zfs-localpv/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-zfs-snapshotter-role
  labels:
    chart: zfs-localpv-2.1.0
    heritage: Helm
    openebs.io/version: "2.1.0"
    role: "openebs-zfs"
    app: "openebs-zfs-controller"
    release: zfs-localpv
    component: "openebs-zfs-controller"
    openebs.io/component-name: "openebs-zfs-controller"
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["create", "get", "list", "watch", "update", "delete"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents/status"]
    verbs: ["update"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots/status"]
    verbs: ["update"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "list", "watch", "delete"]
---
# Source: zfs-localpv/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-zfs-driver-registrar-role
  labels:
    chart: zfs-localpv-2.1.0
    heritage: Helm
    openebs.io/version: "2.1.0"
    role: "openebs-zfs"
    name: "openebs-zfs-node"
    release: zfs-localpv
    openebs.io/component-name: "openebs-zfs-node"
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumes", "nodes", "services"]
    verbs: ["get", "list"]
  - apiGroups: ["*"]
    resources: ["zfsvolumes", "zfssnapshots", "zfsbackups", "zfsrestores", "zfsnodes"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
---
# Source: zfs-localpv/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-zfs-provisioner-binding
  labels:
    chart: zfs-localpv-2.1.0
    heritage: Helm
    openebs.io/version: "2.1.0"
    role: "openebs-zfs"
    app: "openebs-zfs-controller"
    release: zfs-localpv
    component: "openebs-zfs-controller"
    openebs.io/component-name: "openebs-zfs-controller"
subjects:
  - kind: ServiceAccount
    name: openebs-zfs-controller-sa
    namespace: openebs
roleRef:
  kind: ClusterRole
  name: openebs-zfs-provisioner-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: zfs-localpv/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-zfs-snapshotter-binding
  labels:
    chart: zfs-localpv-2.1.0
    heritage: Helm
    openebs.io/version: "2.1.0"
    role: "openebs-zfs"
    app: "openebs-zfs-controller"
    release: zfs-localpv
    component: "openebs-zfs-controller"
    openebs.io/component-name: "openebs-zfs-controller"
subjects:
  - kind: ServiceAccount
    name: openebs-zfs-controller-sa
    namespace: openebs
roleRef:
  kind: ClusterRole
  name: openebs-zfs-snapshotter-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: zfs-localpv/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-zfs-driver-registrar-binding
  labels:
    chart: zfs-localpv-2.1.0
    heritage: Helm
    openebs.io/version: "2.1.0"
    role: "openebs-zfs"
    name: "openebs-zfs-node"
    release: zfs-localpv
    openebs.io/component-name: "openebs-zfs-node"
subjects:
  - kind: ServiceAccount
    name: openebs-zfs-node-sa
    namespace: openebs
roleRef:
  kind: ClusterRole
  name: openebs-zfs-driver-registrar-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: zfs-localpv/templates/zfs-node.yaml
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: zfs-localpv-node
  labels:
    chart: zfs-localpv-2.1.0
    heritage: Helm
    openebs.io/version: "2.1.0"
    role: "openebs-zfs"
    name: "openebs-zfs-node"
    release: zfs-localpv
    openebs.io/component-name: "openebs-zfs-node"
spec:
  selector:
    matchLabels:
      name: "openebs-zfs-node"
      release: zfs-localpv
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      labels:
        chart: zfs-localpv-2.1.0
        heritage: Helm
        openebs.io/version: "2.1.0"
        role: "openebs-zfs"
        name: "openebs-zfs-node"
        release: zfs-localpv
        openebs.io/component-name: "openebs-zfs-node"
    spec:
      priorityClassName: zfs-localpv-zfs-csi-node-critical
      serviceAccount: openebs-zfs-node-sa
      hostNetwork: true
      containers:
        - name: csi-node-driver-registrar
          image: "k8s.gcr.io/sig-storage/csi-node-driver-registrar:v2.3.0"
          imagePullPolicy: IfNotPresent
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /registration/zfs-localpv /registration/zfs-localpv-reg.sock"]
          env:
            - name: ADDRESS
              value: /plugin/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: /var/lib/kubelet/plugins/zfs-localpv/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: NODE_DRIVER
              value: openebs-zfs
          volumeMounts:
            - name: plugin-dir
              mountPath: /plugin
            - name: registration-dir
              mountPath: /registration
        - name: openebs-zfs-plugin
          securityContext:
            privileged: true
            allowPrivilegeEscalation: true
          image: "openebs/zfs-driver:2.1.0"
          imagePullPolicy: IfNotPresent
          args:
            - "--nodename=$(OPENEBS_NODE_NAME)"
            - "--endpoint=$(OPENEBS_CSI_ENDPOINT)"
            - "--plugin=$(OPENEBS_NODE_DRIVER)"
          env:
            - name: OPENEBS_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: OPENEBS_CSI_ENDPOINT
              value: unix:///plugin/csi.sock
            - name: OPENEBS_NODE_DRIVER
              value: agent
            - name: OPENEBS_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: ALLOWED_TOPOLOGIES
              value: "All"
          volumeMounts:
            - name: plugin-dir
              mountPath: /plugin
            - name: device-dir
              mountPath: /dev
            - name: encr-keys
              mountPath: /home/keys
            - name: chroot-zfs
              mountPath: /sbin/zfs
              subPath: zfs
            - name: host-root
              mountPath: /host
              mountPropagation: "HostToContainer"
              readOnly: true
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet/
              # needed so that any mounts setup inside this container are
              # propagated back to the host machine.
              mountPropagation: "Bidirectional"
      volumes:
        - name: device-dir
          hostPath:
            path: /dev
            type: Directory
        - name: encr-keys
          hostPath:
            path: /home/keys
            type: DirectoryOrCreate
        - name: chroot-zfs
          configMap:
            defaultMode: 0555
            name: openebs-zfspv-bin
        - name: host-root
          hostPath:
            path: /
            type: Directory
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: DirectoryOrCreate
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/zfs-localpv/
            type: DirectoryOrCreate
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet/
            type: Directory
---
# Source: zfs-localpv/templates/zfs-contoller.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zfs-localpv-controller
  labels:
    chart: zfs-localpv-2.1.0
    heritage: Helm
    openebs.io/version: "2.1.0"
    role: "openebs-zfs"
    app: "openebs-zfs-controller"
    release: zfs-localpv
    component: "openebs-zfs-controller"
    openebs.io/component-name: "openebs-zfs-controller"
spec:
  selector:
    matchLabels:
      app: "openebs-zfs-controller"
      release: zfs-localpv
      component: "openebs-zfs-controller"
  serviceName: "openebs-zfs"
  replicas: 1
  template:
    metadata:
      labels:
        chart: zfs-localpv-2.1.0
        heritage: Helm
        openebs.io/version: "2.1.0"
        role: "openebs-zfs"
        app: "openebs-zfs-controller"
        release: zfs-localpv
        component: "openebs-zfs-controller"
        openebs.io/component-name: "openebs-zfs-controller"
        
        name: openebs-zfs-controller
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - openebs-zfs-controller
            topologyKey: "kubernetes.io/hostname"
      priorityClassName: zfs-localpv-zfs-csi-controller-critical
      serviceAccount: openebs-zfs-controller-sa
      containers:
        - name: csi-resizer
          image: "k8s.gcr.io/sig-storage/csi-resizer:v1.2.0"
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
            - "--leader-election"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-snapshotter
          image: "k8s.gcr.io/sig-storage/csi-snapshotter:v4.0.0"
          imagePullPolicy: IfNotPresent
          args:
            - "--csi-address=$(ADDRESS)"
            - "--leader-election"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: snapshot-controller
          image: "k8s.gcr.io/sig-storage/snapshot-controller:v4.0.0"
          args:
            - "--v=5"
            - "--leader-election=true"
          imagePullPolicy: IfNotPresent
        - name: csi-provisioner
          image: "k8s.gcr.io/sig-storage/csi-provisioner:v3.0.0"
          imagePullPolicy: IfNotPresent
          args:
            - "--csi-address=$(ADDRESS)"
            - "--v=5"
            - "--feature-gates=Topology=true"
            - "--strict-topology"
            - "--leader-election"
            - "--enable-capacity=true"
            - "--extra-create-metadata=true"
            - "--default-fstype=ext4"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: openebs-zfs-plugin
          image: "openebs/zfs-driver:2.1.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: OPENEBS_CONTROLLER_DRIVER
              value: controller
            - name: OPENEBS_CSI_ENDPOINT
              value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
            - name: OPENEBS_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: OPENEBS_IO_INSTALLER_TYPE
              value: "zfs-localpv-helm"
            - name: OPENEBS_IO_ENABLE_ANALYTICS
              value: "true"
          args :
            - "--endpoint=$(OPENEBS_CSI_ENDPOINT)"
            - "--plugin=$(OPENEBS_CONTROLLER_DRIVER)"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
      volumes:
        - name: socket-dir
          emptyDir: {}
---
# Source: zfs-localpv/templates/csidriver.yaml
# Create the CSI Driver object
apiVersion: storage.k8s.io/v1
kind: CSIDriver
metadata:
  name: zfs.csi.openebs.io
spec:
  # do not require volumeattachment
  attachRequired: false
  podInfoOnMount: false
  storageCapacity: true
---
# Source: zfs-localpv/templates/priority-class.yaml
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: zfs-localpv-zfs-csi-controller-critical
value: 900000000
globalDefault: false
description: "This priority class should be used for the CStor CSI driver controller deployment only."
---
# Source: zfs-localpv/templates/priority-class.yaml
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: zfs-localpv-zfs-csi-node-critical
value: 900001000
globalDefault: false
description: "This priority class should be used for the CStor CSI driver node deployment only."

